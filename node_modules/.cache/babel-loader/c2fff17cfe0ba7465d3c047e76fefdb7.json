{"ast":null,"code":"import _slicedToArray from\"C:/Users/\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C/Desktop/norris/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{makeStyles}from'@mui/styles';import{Paper,CircularProgress,Card,CardContent,Typography}from\"@mui/material\";import{useDispatch,useSelector}from\"react-redux\";import{getRandomJoke,jokesSelector}from'../redux/joke';import{categorySelector}from\"../redux/category\";import{searchTextSelector}from\"../redux/searchText\";import{fetchRandomJoke,fetchQuerriedRandomJoke,fetchJokeFromCategory}from\"../API/NorrisAPI.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles({root:{width:'1050px',marginLeft:'auto',marginRight:'auto',marginTop:'10px',\"&:hover\":{cursor:\"pointer\"}},card:{backgroundColor:function backgroundColor(props){return!props.joke?\"tomato\":null;}}});var JokeCard=function JokeCard(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),elevation=_useState2[0],setElevation=_useState2[1];var dispatch=useDispatch();var _useSelector=useSelector(jokesSelector),joke=_useSelector.joke,loading=_useSelector.loading,error=_useSelector.error;var _useSelector2=useSelector(categorySelector),category=_useSelector2.category;var _useSelector3=useSelector(searchTextSelector),searchText=_useSelector3.searchText;var classes=useStyles({joke:joke});useEffect(function(){dispatch(getRandomJoke(fetchRandomJoke));},[dispatch]);var handleOnMouseMove=function handleOnMouseMove(){setElevation(5);};var handleOnMouseOut=function handleOnMouseOut(){setElevation(0);};var handleOnClick=function handleOnClick(){if(searchText.length!==0){dispatch(getRandomJoke(fetchQuerriedRandomJoke,{category:category,searchText:searchText}));}else if(category!==null){dispatch(getRandomJoke(fetchJokeFromCategory,{category:category}));}else{dispatch(getRandomJoke(fetchRandomJoke));}};return/*#__PURE__*/_jsx(Paper,{elevation:elevation,onMouseMove:handleOnMouseMove,onMouseOut:handleOnMouseOut,className:classes.root,onClick:handleOnClick,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{className:classes.card,children:[loading&&/*#__PURE__*/_jsx(CircularProgress,{}),!loading&&!error&&joke&&/*#__PURE__*/_jsx(Typography,{variant:\"body1\",align:\"center\",children:joke}),(error||!joke)&&/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",align:\"center\",children:[\"No joke with phrase \\\"\",/*#__PURE__*/_jsx(\"i\",{children:searchText}),\"\\\" found.\"]})]})})});};export default JokeCard;","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/components/JokeCard.jsx"],"names":["React","useState","useEffect","makeStyles","Paper","CircularProgress","Card","CardContent","Typography","useDispatch","useSelector","getRandomJoke","jokesSelector","categorySelector","searchTextSelector","fetchRandomJoke","fetchQuerriedRandomJoke","fetchJokeFromCategory","useStyles","root","width","marginLeft","marginRight","marginTop","cursor","card","backgroundColor","props","joke","JokeCard","elevation","setElevation","dispatch","loading","error","category","searchText","classes","handleOnMouseMove","handleOnMouseOut","handleOnClick","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Paper, CircularProgress, Card, CardContent, Typography } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRandomJoke, jokesSelector } from '../redux/joke';\r\nimport { categorySelector } from \"../redux/category\";\r\nimport { searchTextSelector } from \"../redux/searchText\";\r\nimport {\r\n    fetchRandomJoke,\r\n    fetchQuerriedRandomJoke,\r\n    fetchJokeFromCategory,\r\n} from \"../API/NorrisAPI.js\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '1050px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        marginTop: '10px',\r\n        \"&:hover\": {\r\n            cursor: \"pointer\",\r\n        },\r\n    },\r\n    card: {\r\n        backgroundColor: (props) => !props.joke ? \"tomato\" : null\r\n    }\r\n});\r\n\r\nconst JokeCard = () => {\r\n    const [elevation, setElevation] = useState(0)\r\n    const dispatch = useDispatch()\r\n    const { joke, loading, error } = useSelector(jokesSelector)\r\n    const { category } = useSelector(categorySelector)\r\n    const { searchText } = useSelector(searchTextSelector)\r\n    const classes = useStyles({ joke })\r\n\r\n    useEffect(() => {\r\n        dispatch(getRandomJoke(fetchRandomJoke))\r\n    }, [dispatch])\r\n\r\n    const handleOnMouseMove = () => {\r\n        setElevation(5)\r\n    }\r\n\r\n    const handleOnMouseOut = () => {\r\n        setElevation(0)\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        if (searchText.length !== 0) {\r\n            dispatch(\r\n                getRandomJoke(fetchQuerriedRandomJoke, {\r\n                    category: category,\r\n                    searchText: searchText,\r\n                })\r\n            )\r\n        } else if (category !== null) {\r\n            dispatch(getRandomJoke(fetchJokeFromCategory, { category: category }))\r\n        } else {\r\n            dispatch(getRandomJoke(fetchRandomJoke))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            elevation={elevation}\r\n            onMouseMove={handleOnMouseMove}\r\n            onMouseOut={handleOnMouseOut}\r\n            className={classes.root}\r\n            onClick={handleOnClick}\r\n        >\r\n            <Card>\r\n                <CardContent className={classes.card}>\r\n                    {loading && <CircularProgress />}\r\n                    {!loading && !error && joke && (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            {joke}\r\n                        </Typography>\r\n                    )}\r\n                    {(error || !joke) && (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            No joke with phrase \"<i>{searchText}</i>\" found.\r\n                        </Typography>\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default JokeCard"]},"metadata":{},"sourceType":"module"}