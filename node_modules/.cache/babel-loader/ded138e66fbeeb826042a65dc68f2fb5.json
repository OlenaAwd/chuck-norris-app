{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  loading: false,\n  error: false,\n  joke: null\n};\nconst jokesSlice = createSlice({\n  name: \"jokes\",\n  initialState,\n  reducers: {\n    setJokesLoading: state => {\n      state.loading = true;\n    },\n    setJokesSuccess: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.joke = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    setJokesError: state => {\n      state.loading = false;\n      state.error = true;\n    }\n  }\n}); // Actions generated from the slice\n\nexport const {\n  setJokesLoading,\n  setJokesSuccess,\n  setJokesError\n} = jokesSlice.actions; // Selector\n\nexport const jokesSelector = state => state.joke; // Reducer\n\nexport default jokesSlice.reducer; // Asynchronous thunk action\n\nexport const getRandomJoke = (fetchJoke, params) => {\n  return async dispatch => {\n    dispatch(setJokesLoading());\n\n    try {\n      const data = await fetchJoke(params);\n      dispatch(setJokesSuccess(data));\n    } catch (error) {\n      dispatch(setJokesError());\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/redux/joke.js"],"names":["createSlice","initialState","loading","error","joke","jokesSlice","name","reducers","setJokesLoading","state","setJokesSuccess","payload","hasErrors","setJokesError","actions","jokesSelector","reducer","getRandomJoke","fetchJoke","params","dispatch","data"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,OAAO,EAAE,KADe;AAExBC,EAAAA,KAAK,EAAE,KAFiB;AAGxBC,EAAAA,IAAI,EAAE;AAHkB,CAArB;AAMP,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC3BM,EAAAA,IAAI,EAAE,OADqB;AAE3BL,EAAAA,YAF2B;AAG3BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHK;AAINQ,IAAAA,eAAe,EAAE,CAACD,KAAD,WAAwB;AAAA,UAAhB;AAAEE,QAAAA;AAAF,OAAgB;AACrCF,MAAAA,KAAK,CAACL,IAAN,GAAaO,OAAb;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACG,SAAN,GAAkB,KAAlB;AACH,KARK;AASNC,IAAAA,aAAa,EAAGJ,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACH;AAZK;AAHiB,CAAD,CAA9B,C,CAmBA;;AACA,OAAO,MAAM;AACTK,EAAAA,eADS;AAETE,EAAAA,eAFS;AAGTG,EAAAA;AAHS,IAITR,UAAU,CAACS,OAJR,C,CAMP;;AACA,OAAO,MAAMC,aAAa,GAAIN,KAAD,IAAWA,KAAK,CAACL,IAAvC,C,CAEP;;AACA,eAAeC,UAAU,CAACW,OAA1B,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAChD,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;;AAEA,QAAI;AACA,YAAMa,IAAI,GAAG,MAAMH,SAAS,CAACC,MAAD,CAA5B;AACAC,MAAAA,QAAQ,CAACV,eAAe,CAACW,IAAD,CAAhB,CAAR;AACH,KAHD,CAGE,OAAOlB,KAAP,EAAc;AACZiB,MAAAA,QAAQ,CAACP,aAAa,EAAd,CAAR;AACH;AACJ,GATD;AAUH,CAXM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport const initialState = {\r\n    loading: false,\r\n    error: false,\r\n    joke: null,\r\n}\r\n\r\nconst jokesSlice = createSlice({\r\n    name: \"jokes\",\r\n    initialState,\r\n    reducers: {\r\n        setJokesLoading: (state) => {\r\n            state.loading = true\r\n        },\r\n        setJokesSuccess: (state, { payload }) => {\r\n            state.joke = payload\r\n            state.loading = false\r\n            state.hasErrors = false\r\n        },\r\n        setJokesError: (state) => {\r\n            state.loading = false\r\n            state.error = true\r\n        },\r\n    },\r\n})\r\n\r\n// Actions generated from the slice\r\nexport const {\r\n    setJokesLoading,\r\n    setJokesSuccess,\r\n    setJokesError,\r\n} = jokesSlice.actions\r\n\r\n// Selector\r\nexport const jokesSelector = (state) => state.joke\r\n\r\n// Reducer\r\nexport default jokesSlice.reducer\r\n\r\n// Asynchronous thunk action\r\nexport const getRandomJoke = (fetchJoke, params) => {\r\n    return async (dispatch) => {\r\n        dispatch(setJokesLoading())\r\n\r\n        try {\r\n            const data = await fetchJoke(params)\r\n            dispatch(setJokesSuccess(data))\r\n        } catch (error) {\r\n            dispatch(setJokesError())\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}