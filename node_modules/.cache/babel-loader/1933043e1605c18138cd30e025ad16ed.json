{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";export var initialState={searchText:\"\",textTooShort:false};var searchTextSlice=createSlice({name:\"searchText\",initialState:initialState,reducers:{setSearchText:function setSearchText(state,action){state.searchText=action.payload;if(action.payload.length>0&&action.payload.length<3){state.textTooShort=true;}else{state.textTooShort=false;}}}});// Action generated from the slice\nvar setSearchText=searchTextSlice.actions.setSearchText;// Selector\nexport{setSearchText};export var searchTextSelector=function searchTextSelector(state){return state.searchText;};// Reducer\nexport default searchTextSlice.reducer;","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/redux/searchText.js"],"names":["createSlice","initialState","searchText","textTooShort","searchTextSlice","name","reducers","setSearchText","state","action","payload","length","actions","searchTextSelector","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,CACxBC,UAAU,CAAE,EADY,CAExBC,YAAY,CAAE,KAFU,CAArB,CAKP,GAAMC,CAAAA,eAAe,CAAGJ,WAAW,CAAC,CAChCK,IAAI,CAAE,YAD0B,CAEhCJ,YAAY,CAAZA,YAFgC,CAGhCK,QAAQ,CAAE,CACNC,aAAa,CAAE,uBAACC,KAAD,CAAQC,MAAR,CAAmB,CAC9BD,KAAK,CAACN,UAAN,CAAmBO,MAAM,CAACC,OAA1B,CACA,GAAID,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAwB,CAAxB,EAA6BF,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAwB,CAAzD,CAA4D,CACxDH,KAAK,CAACL,YAAN,CAAqB,IAArB,CACH,CAFD,IAEO,CACHK,KAAK,CAACL,YAAN,CAAqB,KAArB,CACH,CACJ,CARK,CAHsB,CAAD,CAAnC,CAeA;AACO,GAAQI,CAAAA,aAAR,CAA0BH,eAAe,CAACQ,OAA1C,CAAQL,aAAR,CAEP;sBACA,MAAO,IAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACL,KAAD,QAAWA,CAAAA,KAAK,CAACN,UAAjB,EAA3B,CAEP;AACA,cAAeE,CAAAA,eAAe,CAACU,OAA/B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport const initialState = {\r\n    searchText: \"\",\r\n    textTooShort: false,\r\n}\r\n\r\nconst searchTextSlice = createSlice({\r\n    name: \"searchText\",\r\n    initialState,\r\n    reducers: {\r\n        setSearchText: (state, action) => {\r\n            state.searchText = action.payload\r\n            if (action.payload.length > 0 && action.payload.length < 3) {\r\n                state.textTooShort = true\r\n            } else {\r\n                state.textTooShort = false\r\n            }\r\n        },\r\n    },\r\n})\r\n\r\n// Action generated from the slice\r\nexport const { setSearchText } = searchTextSlice.actions\r\n\r\n// Selector\r\nexport const searchTextSelector = (state) => state.searchText\r\n\r\n// Reducer\r\nexport default searchTextSlice.reducer"]},"metadata":{},"sourceType":"module"}