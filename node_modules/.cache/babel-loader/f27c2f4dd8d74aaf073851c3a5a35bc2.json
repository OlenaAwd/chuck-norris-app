{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\\\Desktop\\\\norris\\\\src\\\\components\\\\JokeCategories.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect } from \"react\";\nimport { makeStyles } from '@mui/styles';\nimport { Chip, CircularProgress, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRandomJoke } from \"../redux/joke\";\nimport { getCategories, categoriesSelector } from \"../redux/categories\";\nimport { setCategory, categorySelector } from \"../redux/category\";\nimport { fetchRandomJoke, fetchJokeFromCategory, fetchCategories } from \"../API/NorrisAPI.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: '55px',\n    display: \"flex\",\n    justifyContent: \"safe center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.8)\n    },\n    listStyle: \"none\"\n  },\n  chip: {\n    margin: theme.spacing(0.4),\n    marginTop: '40px',\n    marginBottom: '30px'\n  }\n}));\n\nconst JokeCategories = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    categories,\n    loading,\n    error\n  } = useSelector(categoriesSelector);\n  const {\n    category\n  } = useSelector(categorySelector);\n  useEffect(() => {\n    dispatch(getCategories(fetchCategories));\n  }, [dispatch]);\n\n  const handleClick = e => {\n    if (category === e.target.textContent) {\n      dispatch(setCategory(null));\n      dispatch(getRandomJoke(fetchRandomJoke));\n    } else {\n      dispatch(setCategory(e.target.textContent));\n      dispatch(getRandomJoke(fetchJokeFromCategory, {\n        category: e.target.textContent\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this), !loading && !error && categories.map(data => {\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        label: data,\n        onClick: handleClick,\n        color: data === category ? \"primary\" : \"secondary\",\n        className: classes.chip\n      }, data, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this);\n    }), error && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      align: \"left\",\n      children: \"No categories found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(JokeCategories, \"4xILE13iphcEwtJBQ72svA+q98Y=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = JokeCategories;\nexport default JokeCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"JokeCategories\");","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/components/JokeCategories.jsx"],"names":["React","useEffect","makeStyles","Chip","CircularProgress","Typography","useDispatch","useSelector","getRandomJoke","getCategories","categoriesSelector","setCategory","categorySelector","fetchRandomJoke","fetchJokeFromCategory","fetchCategories","useStyles","theme","root","paddingTop","display","justifyContent","flexWrap","margin","spacing","listStyle","chip","marginTop","marginBottom","JokeCategories","classes","dispatch","categories","loading","error","category","handleClick","e","target","textContent","map","data"],"mappings":"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","sourcesContent":["import { React, useEffect } from \"react\";\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Chip, CircularProgress, Typography } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRandomJoke } from \"../redux/joke\";\r\nimport { getCategories, categoriesSelector } from \"../redux/categories\";\r\nimport { setCategory, categorySelector } from \"../redux/category\";\r\nimport {\r\n    fetchRandomJoke,\r\n    fetchJokeFromCategory,\r\n    fetchCategories\r\n} from \"../API/NorrisAPI.js\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '55px',\r\n        display: \"flex\",\r\n        justifyContent: \"safe center\",\r\n        flexWrap: \"wrap\",\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.8),\r\n        },\r\n        listStyle: \"none\",\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(0.4),\r\n        marginTop: '40px',\r\n        marginBottom: '30px',\r\n    },\r\n}));\r\n\r\nconst JokeCategories = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { categories, loading, error } = useSelector(categoriesSelector);\r\n    const { category } = useSelector(categorySelector);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories(fetchCategories));\r\n    }, [dispatch])\r\n\r\n    const handleClick = (e) => {\r\n        if (category === e.target.textContent) {\r\n            dispatch(setCategory(null))\r\n            dispatch(getRandomJoke(fetchRandomJoke))\r\n        } else {\r\n            dispatch(setCategory(e.target.textContent))\r\n            dispatch(getRandomJoke(fetchJokeFromCategory, { category: e.target.textContent }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {loading && <CircularProgress />}\r\n            {!loading &&\r\n                !error &&\r\n                categories.map((data) => {\r\n                    return (\r\n                        <Chip\r\n                            key={data}\r\n                            label={data}\r\n                            onClick={handleClick}\r\n                            color={data === category ? \"primary\" : \"secondary\"}\r\n                            className={classes.chip}\r\n                        />\r\n                    )\r\n                })}\r\n            {error && (\r\n                <Typography variant=\"body1\" align=\"left\">\r\n                    No categories found.\r\n                </Typography>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeCategories\r\n"]},"metadata":{},"sourceType":"module"}