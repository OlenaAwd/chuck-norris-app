{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  searchText: \"\",\n  textTooShort: false\n};\nconst searchTextSlice = createSlice({\n  name: \"searchText\",\n  initialState,\n  reducers: {\n    setSearchText: (state, action) => {\n      state.searchText = action.payload;\n\n      if (action.payload.length > 0 && action.payload.length < 3) {\n        state.textTooShort = true;\n      } else {\n        state.textTooShort = false;\n      }\n    }\n  }\n}); // Action generated from the slice\n\nexport const {\n  setSearchText\n} = searchTextSlice.actions; // Selector\n\nexport const searchTextSelector = state => state.searchText; // Reducer\n\nexport default searchTextSlice.reducer;","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/redux/searchText.js"],"names":["createSlice","initialState","searchText","textTooShort","searchTextSlice","name","reducers","setSearchText","state","action","payload","length","actions","searchTextSelector","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,EADY;AAExBC,EAAAA,YAAY,EAAE;AAFU,CAArB;AAKP,MAAMC,eAAe,GAAGJ,WAAW,CAAC;AAChCK,EAAAA,IAAI,EAAE,YAD0B;AAEhCJ,EAAAA,YAFgC;AAGhCK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACC,OAA1B;;AACA,UAAID,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAxB,IAA6BF,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAzD,EAA4D;AACxDH,QAAAA,KAAK,CAACL,YAAN,GAAqB,IAArB;AACH,OAFD,MAEO;AACHK,QAAAA,KAAK,CAACL,YAAN,GAAqB,KAArB;AACH;AACJ;AARK;AAHsB,CAAD,CAAnC,C,CAeA;;AACA,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAoBH,eAAe,CAACQ,OAA1C,C,CAEP;;AACA,OAAO,MAAMC,kBAAkB,GAAIL,KAAD,IAAWA,KAAK,CAACN,UAA5C,C,CAEP;;AACA,eAAeE,eAAe,CAACU,OAA/B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport const initialState = {\r\n    searchText: \"\",\r\n    textTooShort: false,\r\n}\r\n\r\nconst searchTextSlice = createSlice({\r\n    name: \"searchText\",\r\n    initialState,\r\n    reducers: {\r\n        setSearchText: (state, action) => {\r\n            state.searchText = action.payload\r\n            if (action.payload.length > 0 && action.payload.length < 3) {\r\n                state.textTooShort = true\r\n            } else {\r\n                state.textTooShort = false\r\n            }\r\n        },\r\n    },\r\n})\r\n\r\n// Action generated from the slice\r\nexport const { setSearchText } = searchTextSlice.actions\r\n\r\n// Selector\r\nexport const searchTextSelector = (state) => state.searchText\r\n\r\n// Reducer\r\nexport default searchTextSlice.reducer"]},"metadata":{},"sourceType":"module"}