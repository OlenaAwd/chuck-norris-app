{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\\\Desktop\\\\norris\\\\src\\\\components\\\\JokeCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@mui/styles';\nimport { Paper, CircularProgress, Card, CardContent, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRandomJoke, jokesSelector } from '../redux/joke';\nimport { categorySelector } from \"../redux/category\";\nimport { searchTextSelector } from \"../redux/searchText\";\nimport { fetchRandomJoke, fetchQuerriedRandomJoke, fetchJokeFromCategory } from \"../API/NorrisAPI.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: '1050px',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: '10px',\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  },\n  card: {\n    backgroundColor: props => !props.joke ? \"tomato\" : null\n  }\n});\n\nconst JokeCard = () => {\n  _s();\n\n  const [elevation, setElevation] = useState(0);\n  const dispatch = useDispatch();\n  const {\n    joke,\n    loading,\n    error\n  } = useSelector(jokesSelector);\n  const {\n    category\n  } = useSelector(categorySelector);\n  const {\n    searchText\n  } = useSelector(searchTextSelector);\n  const classes = useStyles({\n    joke\n  });\n  useEffect(() => {\n    dispatch(getRandomJoke(fetchRandomJoke));\n  }, [dispatch]);\n\n  const handleOnMouseMove = () => {\n    setElevation(5);\n  };\n\n  const handleOnMouseOut = () => {\n    setElevation(0);\n  };\n\n  const handleOnClick = () => {\n    if (searchText.length !== 0) {\n      dispatch(getRandomJoke(fetchQuerriedRandomJoke, {\n        category: category,\n        searchText: searchText\n      }));\n    } else if (category !== null) {\n      dispatch(getRandomJoke(fetchJokeFromCategory, {\n        category: category\n      }));\n    } else {\n      dispatch(getRandomJoke(fetchRandomJoke));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: elevation,\n    onMouseMove: handleOnMouseMove,\n    onMouseOut: handleOnMouseOut,\n    className: classes.root,\n    onClick: handleOnClick,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        className: classes.card,\n        children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }, this), !loading && !error && joke && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          align: \"center\",\n          children: joke\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), (error || !joke) && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          align: \"center\",\n          children: [\"No joke with phrase \\\"\", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: searchText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 50\n          }, this), \"\\\" found.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(JokeCard, \"q2PIK5PumzWtrR07fEu9ISGe7cM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useStyles];\n});\n\n_c = JokeCard;\nexport default JokeCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"JokeCard\");","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/components/JokeCard.jsx"],"names":["React","useState","useEffect","makeStyles","Paper","CircularProgress","Card","CardContent","Typography","useDispatch","useSelector","getRandomJoke","jokesSelector","categorySelector","searchTextSelector","fetchRandomJoke","fetchQuerriedRandomJoke","fetchJokeFromCategory","useStyles","root","width","marginLeft","marginRight","marginTop","cursor","card","backgroundColor","props","joke","JokeCard","elevation","setElevation","dispatch","loading","error","category","searchText","classes","handleOnMouseMove","handleOnMouseOut","handleOnClick","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Paper, CircularProgress, Card, CardContent, Typography } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRandomJoke, jokesSelector } from '../redux/joke';\r\nimport { categorySelector } from \"../redux/category\";\r\nimport { searchTextSelector } from \"../redux/searchText\";\r\nimport {\r\n    fetchRandomJoke,\r\n    fetchQuerriedRandomJoke,\r\n    fetchJokeFromCategory,\r\n} from \"../API/NorrisAPI.js\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '1050px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        marginTop: '10px',\r\n        \"&:hover\": {\r\n            cursor: \"pointer\",\r\n        },\r\n    },\r\n    card: {\r\n        backgroundColor: (props) => !props.joke ? \"tomato\" : null\r\n    }\r\n});\r\n\r\nconst JokeCard = () => {\r\n    const [elevation, setElevation] = useState(0)\r\n    const dispatch = useDispatch()\r\n    const { joke, loading, error } = useSelector(jokesSelector)\r\n    const { category } = useSelector(categorySelector)\r\n    const { searchText } = useSelector(searchTextSelector)\r\n    const classes = useStyles({ joke })\r\n\r\n    useEffect(() => {\r\n        dispatch(getRandomJoke(fetchRandomJoke))\r\n    }, [dispatch])\r\n\r\n    const handleOnMouseMove = () => {\r\n        setElevation(5)\r\n    }\r\n\r\n    const handleOnMouseOut = () => {\r\n        setElevation(0)\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        if (searchText.length !== 0) {\r\n            dispatch(\r\n                getRandomJoke(fetchQuerriedRandomJoke, {\r\n                    category: category,\r\n                    searchText: searchText,\r\n                })\r\n            )\r\n        } else if (category !== null) {\r\n            dispatch(getRandomJoke(fetchJokeFromCategory, { category: category }))\r\n        } else {\r\n            dispatch(getRandomJoke(fetchRandomJoke))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            elevation={elevation}\r\n            onMouseMove={handleOnMouseMove}\r\n            onMouseOut={handleOnMouseOut}\r\n            className={classes.root}\r\n            onClick={handleOnClick}\r\n        >\r\n            <Card>\r\n                <CardContent className={classes.card}>\r\n                    {loading && <CircularProgress />}\r\n                    {!loading && !error && joke && (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            {joke}\r\n                        </Typography>\r\n                    )}\r\n                    {(error || !joke) && (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            No joke with phrase \"<i>{searchText}</i>\" found.\r\n                        </Typography>\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default JokeCard"]},"metadata":{},"sourceType":"module"}