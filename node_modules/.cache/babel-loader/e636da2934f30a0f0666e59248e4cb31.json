{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\\\Desktop\\\\norris\\\\src\\\\components\\\\JokeForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { makeStyles } from '@mui/styles';\nimport { TextField } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRandomJoke } from \"../redux/joke\";\nimport { setSearchText, searchTextSelector } from \"../redux/searchText\";\nimport { setCategory, categorySelector } from \"../redux/category\";\nimport { fetchQuerriedRandomJoke } from \"../API/NorrisAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(2),\n      width: theme.spacing(50),\n      height: theme.spacing(6)\n    }\n  }\n}));\n\nconst JokeForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const {\n    searchText,\n    textTooShort\n  } = useSelector(searchTextSelector);\n  const {\n    category\n  } = useSelector(categorySelector);\n\n  const handleOnChange = e => {\n    dispatch(setSearchText(e.target.value));\n\n    if (e.target.value.length > 0) {\n      dispatch(setCategory(null));\n    }\n  };\n\n  const prevSearchTextRef = useRef();\n  useEffect(() => {\n    prevSearchTextRef.current = searchText;\n  });\n  const prevSearchText = prevSearchTextRef.current;\n\n  const getSearch = () => {\n    setLoading(true);\n\n    if (searchText.length !== 0 && prevSearchText.length !== 0 && category !== null) {\n      dispatch(setSearchText(\"\"));\n    } else if (!textTooShort && searchText.length !== 0) {\n      dispatch(getRandomJoke(fetchQuerriedRandomJoke, {\n        searchText: searchText\n      }));\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getSearch();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      sx: {\n        input: {\n          color: '#000',\n          border: '1px solid #fff',\n          borderRadius: '5px',\n          background: '#fefefe',\n          height: '15px'\n        }\n      },\n      value: searchText,\n      error: textTooShort,\n      helperText: textTooShort ? \"Phrase is too short.\" : \"\",\n      id: \"standard-basic\",\n      onChange: handleOnChange,\n      label: \"Search by phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(JokeForm, \"cNCOGZ1x7JcxNkD4mjyEg5DXnuo=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = JokeForm;\nexport default JokeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"JokeForm\");","map":{"version":3,"sources":["C:/Users/Пользователь/Desktop/norris/src/components/JokeForm.jsx"],"names":["React","useEffect","useState","useRef","makeStyles","TextField","useDispatch","useSelector","getRandomJoke","setSearchText","searchTextSelector","setCategory","categorySelector","fetchQuerriedRandomJoke","useStyles","theme","root","margin","spacing","width","height","JokeForm","classes","dispatch","loading","setLoading","searchText","textTooShort","category","handleOnChange","e","target","value","length","prevSearchTextRef","current","prevSearchText","getSearch","input","color","border","borderRadius","background"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { makeStyles } from '@mui/styles';\r\nimport { TextField } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRandomJoke } from \"../redux/joke\";\r\nimport { setSearchText, searchTextSelector } from \"../redux/searchText\";\r\nimport { setCategory, categorySelector } from \"../redux/category\";\r\nimport { fetchQuerriedRandomJoke } from \"../API/NorrisAPI\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(2),\r\n            width: theme.spacing(50),\r\n            height: theme.spacing(6),\r\n        },\r\n    },\r\n}))\r\n\r\nconst JokeForm = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const [loading, setLoading] = useState(false)\r\n    const { searchText, textTooShort } = useSelector(searchTextSelector)\r\n    const { category } = useSelector(categorySelector)\r\n\r\n    const handleOnChange = (e) => {\r\n        dispatch(setSearchText(e.target.value))\r\n        if (e.target.value.length > 0) {\r\n            dispatch(setCategory(null))\r\n        }\r\n    }\r\n\r\n    const prevSearchTextRef = useRef()\r\n    useEffect(() => {\r\n        prevSearchTextRef.current = searchText\r\n    })\r\n    const prevSearchText = prevSearchTextRef.current\r\n\r\n    const getSearch = () => {\r\n        setLoading(true);\r\n        if (\r\n            searchText.length !== 0 &&\r\n            prevSearchText.length !== 0 &&\r\n            category !== null\r\n        ) {\r\n            dispatch(setSearchText(\"\"))\r\n        } else if (!textTooShort && searchText.length !== 0) {\r\n            dispatch(\r\n                getRandomJoke(fetchQuerriedRandomJoke, { searchText: searchText })\r\n            )\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSearch();\r\n    })\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                sx={{ input: { color: '#000', border: '1px solid #fff', borderRadius: '5px', background: '#fefefe', height: '15px' } }}\r\n                value={searchText}\r\n                error={textTooShort}\r\n                helperText={textTooShort ? \"Phrase is too short.\" : \"\"}\r\n                id=\"standard-basic\"\r\n                onChange={handleOnChange}\r\n                label=\"Search by phrase\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeForm;"]},"metadata":{},"sourceType":"module"}